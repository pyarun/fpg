import datetime

import stripe
from rest_framework import viewsets

from facility.models import Club, Resource, Booking
from facility.serializers import ClubSerializer, ResourceSerializer, BookingSerializer


class ClubView(viewsets.ModelViewSet):
    """
        Create update delete and list the clubs
    """
    model = Club
    serializer_class = ClubSerializer
    queryset = Club.objects.all()
    filter_fields = ('id', 'owner', 'address')
    filter_backends = viewsets.ModelViewSet.filter_backends


class ResourceView(viewsets.ModelViewSet):
    """
        To list, create, update, delete resources.
    """
    model = Resource
    serializer_class = ResourceSerializer
    queryset = Resource.objects.all()
    filter_fields = ('id', 'club', 'sport')
    filter_backends = viewsets.ModelViewSet.filter_backends

    def get_queryset(self):
        """
             Modify default get_queryset method to filter address
        """
        queryset = super(ResourceView, self).get_queryset()
        address = self.request.query_params.get('address', None)
        date = self.request.query_params.get('date', None)
        start_time = self.request.query_params.get('start_time', None)
        end_time = self.request.query_params.get('end_time', None)
        if date:
            date = datetime.datetime.strptime(date, '%m/%d/%Y').strftime('%Y-%m-%d')

        if address is not None:
            queryset = queryset.filter(club__address=address)

        if start_time and end_time:
            resource_id = Booking.objects.exclude(start_time__gte=start_time, end_time__lte=end_time).values_list(
                'resource_id')
            resource_id = [item[0] for item in resource_id]
            queryset = queryset.filter(id__in=resource_id)
        return queryset


class BookingView(viewsets.ModelViewSet):
    """
        To list, create, update, delete bookings
    """
    model = Booking
    serializer_class = BookingSerializer
    queryset = Booking.objects.all()
    filter_fields = ('id', 'resource',)
    filter_backends = viewsets.ModelViewSet.filter_backends

    def get_queryset(self):
        """
         Modify default get_queryset method to filter
        """
        queryset = super(BookingView, self).get_queryset()
        date = self.request.query_params.get('date', None)
        if date:
            date = datetime.datetime.strptime(date, '%m/%d/%Y').strftime('%Y-%m-%d')

        if date is not None:
            queryset = Booking.objects.filter(date=date)

        return queryset

    def create(self, request, *args, **kwargs):
        """
            we have over-ride this function
            This function will create booking entry in database after successful payment
        """
        # This is a secrete key of user's account to whom the payment will arrive.
        stripe.api_key = "sk_test_QBpIvo5lNrftaWto9c9hYrKY"

        # This is token generated by stripe
        token = request.DATA['token']


        # Create the charge on Stripe's servers - this will charge the user's card
        try:
            charge = stripe.Charge.create(
                amount=request.DATA['fee'],  # amount in cents, again
                currency="usd",
                source=token,
                description="Example charge"
            )

        except stripe.error.CardError, e:
            # The card has been declined
            pass

        return super(BookingView, self).create(request, *args, **kwargs)
